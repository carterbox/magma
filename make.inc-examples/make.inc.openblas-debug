#//////////////////////////////////////////////////////////////////////////////
#   -- MAGMA (version 2.x) --
#      Univ. of Tennessee, Knoxville
#      Univ. of California, Berkeley
#      Univ. of Colorado, Denver
#      @date
#//////////////////////////////////////////////////////////////////////////////

# GPU_TARGET contains one or more of the architectures below
# to specify for which GPUs you want to compile MAGMA:
#     Pascal               - NVIDIA compute capability 6.x cards
#     Volta/Turing         - NVIDIA compute capability 7.x cards
#     Ampere/Ada-Lovelace  - NVIDIA compute capability 8.x cards
#     Hopper               - NVIDIA compute capability 9.x cards
#     Blackwell            - NVIDIA compute capability 10.x and 12.x cards
# The default is "Volta Turing Ampere".
# Note that depending on the CUDA version, some compute capabilities may not be supported
# See http://developer.nvidia.com/cuda-gpus
# Older architectures are supported if the proper version of CUDA is used
#
GPU_TARGET ?= Volta Turing Ampere

# --------------------
# programs

CC        = gcc
CXX       = g++
NVCC      = nvcc
FORT      = gfortran

ARCH      = ar
ARCHFLAGS = cr
RANLIB    = ranlib


# --------------------
# flags

# Use -fPIC to make shared (.so) and static (.a) library;
# can be commented out if making only static library.
FPIC      = -fPIC

CFLAGS    = -O3 $(FPIC) -DADD_ -Wall -fopenmp -DDEBUG_MEMORY
FFLAGS    = -O3 $(FPIC) -DADD_ -Wall -Wno-unused-dummy-argument
F90FLAGS  = -O3 $(FPIC) -DADD_ -Wall -Wno-unused-dummy-argument -x f95-cpp-input
NVCCFLAGS = -O3         -DADD_       -Xcompiler "$(FPIC)" -std=c++11
LDFLAGS   =     $(FPIC)              -fopenmp

# C++11 (gcc >= 4.7) is not required, but has benefits like atomic operations
CXXFLAGS := $(CFLAGS) -std=c++11
CFLAGS   += -std=c99


# --------------------
# libraries

# gcc with OpenBLAS (includes LAPACK)
LIB       = -lopenblas

LIB      += -lcublas -lcusparse -lcudart -lcudadevrt


# --------------------
# directories

# define library directories preferably in your environment, or here.
#OPENBLASDIR ?= /usr/local/openblas
#CUDADIR ?= /usr/local/cuda
-include make.check-openblas
-include make.check-cuda

LIBDIR    = -L$(CUDADIR)/lib64 \
            -L$(OPENBLASDIR)/lib

INC       = -I$(CUDADIR)/include
